import math
from random import choice
import random as rnd
import pygame

#from blocks import blocks

FPS = 30
#цвета
RED = 0xFF0000
BLUE = 0x0000FF
YELLOW = 0xFFC91F
GREEN = 0x00FF00
MAGENTA = 0xFF03B8
CYAN = 0x00FFCC
BLACK = (0, 0, 0)
WHITE = 0xFFFFFF
GREY = 0x7D7D7D
GAME_COLORS = [RED, BLUE, YELLOW, GREEN, MAGENTA, CYAN]
#размеры экрана
WIDTH = 800
HEIGHT = 600
#параметры игры
bullet_speed = 10
bullet_radius = 2
tank_speed = 3
round_time = 60
time_speed = 1
#количество танков ии
AI_tanks_numbers = 100
#массив пуль
bullets = []
for i in range(AI_tanks_numbers):
    bullets.append([])
#ландшафт(стены)
walls = [[0, 0], [780, 0], [0, 580], [780, 580], [0, 0], [780, 0], [0, 580], [780, 580], [0, 0], [780, 0], [0, 580], [780, 580], [0, 20], [780, 20], [0, 560], [780, 560], [0, 40], [780, 40], [0, 540], [780, 540], [0, 60], [780, 60], [0, 520], [780, 520], [0, 60], [780, 60], [0, 520], [780, 520], [0, 60], [780, 60], [0, 520], [780, 520], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 100], [780, 100], [0, 480], [780, 480], [0, 100], [780, 100], [0, 480], [780, 480], [0, 120], [780, 120], [0, 460], [780, 460], [0, 120], [780, 120], [0, 460], [780, 460], [0, 140], [780, 140], [0, 440], [780, 440], [0, 140], [780, 140], [0, 440], [780, 440], [0, 140], [780, 140], [0, 440], [780, 440], [0, 160], [780, 160], [0, 420], [780, 420], [0, 160], [780, 160], [0, 420], [780, 420], [0, 180], [780, 180], [0, 400], [780, 400], [0, 180], [780, 180], [0, 400], [780, 400], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [20, 0], [760, 0], [20, 580], [760, 580], [20, 0], [760, 0], [20, 580], [760, 580], [20, 0], [760, 0], [20, 580], [760, 580], [40, 0], [740, 0], [40, 580], [740, 580], [60, 0], [720, 0], [60, 580], [720, 580], [60, 0], [720, 0], [60, 580], [720, 580], [80, 0], [700, 0], [80, 580], [700, 580], [80, 0], [700, 0], [80, 580], [700, 580], [80, 0], [700, 0], [80, 580], [700, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [140, 0], [640, 0], [140, 580], [640, 580], [140, 0], [640, 0], [140, 580], [640, 580], [140, 0], [640, 0], [140, 580], [640, 580], [160, 0], [620, 0], [160, 580], [620, 580], [160, 0], [620, 0], [160, 580], [620, 580], [160, 0], [620, 0], [160, 580], [620, 580], [160, 0], [620, 0], [160, 580], [620, 580], [180, 0], [600, 0], [180, 580], [600, 580], [180, 0], [600, 0], [180, 580], [600, 580], [180, 0], [600, 0], [180, 580], [600, 580], [180, 0], [600, 0], [180, 580], [600, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [220, 0], [560, 0], [220, 580], [560, 580], [220, 0], [560, 0], [220, 580], [560, 580], [220, 0], [560, 0], [220, 580], [560, 580], [220, 0], [560, 0], [220, 580], [560, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [260, 0], [520, 0], [260, 580], [520, 580], [260, 0], [520, 0], [260, 580], [520, 580], [260, 0], [520, 0], [260, 580], [520, 580], [260, 0], [520, 0], [260, 580], [520, 580], [280, 0], [500, 0], [280, 580], [500, 580], [280, 0], [500, 0], [280, 580], [500, 580], [280, 0], [500, 0], [280, 580], [500, 580], [280, 0], [500, 0], [280, 580], [500, 580], [300, 0], [480, 0], [300, 580], [480, 580], [300, 0], [480, 0], [300, 580], [480, 580], [300, 0], [480, 0], [300, 580], [480, 580], [320, 0], [460, 0], [320, 580], [460, 580], [320, 0], [460, 0], [320, 580], [460, 580], [320, 0], [460, 0], [320, 580], [460, 580], [320, 0], [460, 0], [320, 580], [460, 580], [340, 0], [440, 0], [340, 580], [440, 580], [340, 0], [440, 0], [340, 580], [440, 580], [340, 0], [440, 0], [340, 580], [440, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [140, 40], [640, 40], [140, 540], [640, 540], [140, 40], [640, 40], [140, 540], [640, 540], [140, 40], [640, 40], [140, 540], [640, 540], [140, 80], [640, 80], [140, 500], [640, 500], [140, 80], [640, 80], [140, 500], [640, 500], [140, 100], [640, 100], [140, 480], [640, 480], [140, 100], [640, 100], [140, 480], [640, 480], [140, 120], [640, 120], [140, 460], [640, 460], [140, 120], [640, 120], [140, 460], [640, 460], [140, 120], [640, 120], [140, 460], [640, 460], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 60], [640, 60], [140, 520], [640, 520], [60, 180], [720, 180], [60, 400], [720, 400], [60, 180], [720, 180], [60, 400], [720, 400], [60, 180], [720, 180], [60, 400], [720, 400], [60, 180], [720, 180], [60, 400], [720, 400], [80, 180], [700, 180], [80, 400], [700, 400], [80, 180], [700, 180], [80, 400], [700, 400], [100, 180], [680, 180], [100, 400], [680, 400], [100, 180], [680, 180], [100, 400], [680, 400], [120, 180], [660, 180], [120, 400], [660, 400], [120, 180], [660, 180], [120, 400], [660, 400], [120, 180], [660, 180], [120, 400], [660, 400], [120, 180], [660, 180], [120, 400], [660, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [160, 180], [620, 180], [160, 400], [620, 400], [160, 180], [620, 180], [160, 400], [620, 400], [160, 180], [620, 180], [160, 400], [620, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [200, 160], [580, 160], [200, 420], [580, 420], [200, 180], [580, 180], [200, 400], [580, 400], [220, 160], [560, 160], [220, 420], [560, 420], [160, 260], [620, 260], [160, 320], [620, 320], [160, 260], [620, 260], [160, 320], [620, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 220], [500, 220], [280, 360], [500, 360], [280, 220], [500, 220], [280, 360], [500, 360], [280, 220], [500, 220], [280, 360], [500, 360], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 180], [500, 180], [280, 400], [500, 400], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [260, 40], [520, 40], [260, 540], [520, 540], [260, 40], [520, 40], [260, 540], [520, 540], [260, 40], [520, 40], [260, 540], [520, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 40], [420, 40], [360, 540], [420, 540], [360, 40], [420, 40], [360, 540], [420, 540], [360, 40], [420, 40], [360, 540], [420, 540], [360, 40], [420, 40], [360, 540], [420, 540], [360, 80], [420, 80], [360, 500], [420, 500], [360, 80], [420, 80], [360, 500], [420, 500], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 280], [420, 280], [360, 300], [420, 300], [80, 440], [700, 440], [80, 140], [700, 140], [220, 500], [560, 500], [220, 80], [560, 80], [100, 220], [680, 220], [100, 360], [680, 360]]
#создание аксонов
aksons = []
for i in range(AI_tanks_numbers):
    aksons.append([[[901211.096672685, 754151.0651391258, -281539.2064403612, 1011660.8840992367, 364210.6325926816, 56921.06431455331, -757039.0324906905], [383120.82974498614, 729600.6491194828, -394158.8902765354, 49191.16173263689, 187891.09152366326, -105628.97175698513, -270128.8701794067], [-113878.67674805634, -58029.00856370208, -285899.01271077106, 198501.15893363103, -170208.76094911498, -666168.9665954324, -555388.6977372874], [790210.9630648753, -42149.00306658664, -792259.0449310085, -865649.0408788881, -87319.11346151055, -500088.85660007945, 1083270.8483173246], [566490.787184893, 143771.11718731656, 240790.83257458836, -148209.0493874563, 227851.0294766947, -806789.0049284612, -129218.89690858571]], [[-57598.99887129717, -983098.9426446682, 133191.1278127753, -88328.92113903075, 521781.0897399338], [563251.2548904824, -275209.0830948443, 324470.9788887392, 94760.68655175617, 174511.0679907565], [-196758.86005867366, -614539.0157451724, -686868.9715939804, -477628.8772735142, -706368.9115526942], [473741.12470659637, -179689.1725991096, 14900.964627084686, 297220.961655486, 381801.0082488961], [122820.91552807094, -284549.1288964512, 210190.85182219007, -83999.03967321197, -273859.0318605315]], [[173911.02874572232, -92309.07384659952, 180681.0396100233, 165431.01520476994, 475351.2774893525], [7510.8306946423545, -167859.16154510464, -31619.028219430562, 1286570.754653814, 165580.88506327977], [403090.9724835254, 781090.9729139693, -612508.9219212573, 441040.9802558985, 490740.9904562648], [211761.0070641315, -123798.91361721282, -786359.0047258787, 260411.12515116844, 112591.06640887825], [504030.8746895094, 99440.78003592842, 701601.0790855536, 109861.00983294708, 256401.13605028106]]])
#массив определяющий эволюцию
evolution = []
for i in range(int(AI_tanks_numbers // 10) * 4):
    evolution.append(1000000 * (1 + i))
for i in range(int(AI_tanks_numbers // 10) * 2):
    evolution.append(1000 * (1 + i))
for i in range(int(AI_tanks_numbers // 10) * 4):
    evolution.append(1/(10 * (1 + i)))
#история действий танков
x = []
for i in range(AI_tanks_numbers):
    x.append([[], []])
y = []
for i in range(AI_tanks_numbers):
    y.append([[], []])
shooting = []
for i in range(AI_tanks_numbers):
    shooting.append([[0], [0]])

been_shooted = []
for i in range(AI_tanks_numbers):
    been_shooted.append([[], []])
been_stupid_forward_moving = []
for i in range(AI_tanks_numbers):
    been_stupid_forward_moving.append([[], []])
been_stupid_backward_moving = []
for i in range(AI_tanks_numbers):
    been_stupid_backward_moving.append([[], []])

class AI_Tank():
    def __init__(self, screen: pygame.Surface, x, y, alpha):
        self.x = x
        self.y = y
        self.angle = alpha
        self.vx = 0
        self.vy = 0
        self.shooting = 0

    def draw(self, i, j):
        x[i][j].append(self.x)
        y[i][j].append(self.y)
        pygame.draw.polygon(screen, CYAN, [(self.x + math.cos(self.angle) * 10, self.y + math.sin(self.angle) * 10),
                                           (self.x - math.sin(self.angle) * 5, self.y + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10, self.y - math.sin(self.angle) * 10),
                                           (self.x + math.sin(self.angle) * 5, self.y - math.cos(self.angle) * 5)])
        pygame.draw.polygon(screen, CYAN, [(self.x + math.cos(self.angle) * 10 - math.sin(self.angle) * 5,
                                            self.y + math.sin(self.angle) * 10 + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10 - math.sin(self.angle) * 5,
                                            self.y - math.sin(self.angle) * 10 + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10 - math.sin(self.angle) * 8,
                                            self.y - math.sin(self.angle) * 10 + math.cos(self.angle) * 8),
                                           (self.x + math.cos(self.angle) * 10 - math.sin(self.angle) * 8,
                                            self.y + math.sin(self.angle) * 10 + math.cos(self.angle) * 8)])
        pygame.draw.polygon(screen, CYAN, [(self.x - math.cos(self.angle) * 10 + math.sin(self.angle) * 5,
                                            self.y - math.sin(self.angle) * 10 - math.cos(self.angle) * 5),
                                           (self.x + math.cos(self.angle) * 10 + math.sin(self.angle) * 5,
                                            self.y + math.sin(self.angle) * 10 - math.cos(self.angle) * 5),
                                           (self.x + math.cos(self.angle) * 10 + math.sin(self.angle) * 8,
                                            self.y + math.sin(self.angle) * 10 - math.cos(self.angle) * 8),
                                           (self.x - math.cos(self.angle) * 10 + math.sin(self.angle) * 8,
                                            self.y - math.sin(self.angle) * 10 - math.cos(self.angle) * 8)])
        pygame.draw.polygon(screen, CYAN, [(self.x + math.sin(self.angle) * 2, self.y - math.cos(self.angle) * 2),
                                           (self.x - math.sin(self.angle) * 2, self.y + math.cos(self.angle) * 2),
                                           (self.x - math.sin(self.angle) * 2 + math.cos(self.angle) * 15, self.y + math.cos(self.angle) * 2 + math.sin(self.angle) * 15),
                                           (self.x + math.sin(self.angle) * 2 + math.cos(self.angle) * 15, self.y - math.cos(self.angle) * 2 + math.sin(self.angle) * 15)])

    def hittest(self, obj, i, j):
        if (obj.x - self.x) == 0:
            if (obj.y - self.y) >= 0:
                betta = math.pi/2
            else:
                betta = - math.pi / 2
        else:
            betta = math.atan((obj.y - self.y)/(obj.x - self.x))
        if (math.fabs(math.sin(betta - self.angle) * (((obj.y - self.y)**2 + (obj.x - self.x)**2)**(1/2))) <= 8) and (math.fabs(math.cos(betta - self.angle) * (((obj.y - self.y)**2 + (obj.x - self.x)**2)**(1/2))) <= 10):
            return True
            been_shooted[i][j] = True
        else:
            return False
            been_shooted[i][j] = False

    def shot(self, i, j, time):
        if max(shooting[i][j]) + 2 * FPS <= time:
            bullets[i].append(Bullet(screen, self.x + 15 * math.cos(self.angle), self.y + 15 * math.sin(self.angle), self.angle))
            shooting[i][j].append(time)
            self.shooting = 1
        self.shooting = 0

    def rotate_left(self):
        self.angle += -0.1

    def rotate_right(self):
        self.angle += 0.1

    def move_forward(self, i, j):
        self.x += math.cos(self.angle) * tank_speed
        self.y += math.sin(self.angle) * tank_speed
        been_stupid_forward_moving_test = False
        for wall in walls:
            if (wall[0] <= self.x) and (wall[0] + 20 >= self.x) and (wall[1] <= self.y) and (wall[1] + 20 >= self.y):
                self.x += - math.cos(self.angle) * tank_speed
                self.y += - math.sin(self.angle) * tank_speed
                been_stupid_forward_moving_test = True
        been_stupid_forward_moving[i][j].append(been_stupid_forward_moving_test)

    def move_backward(self, i, j):
        self.x += - math.cos(self.angle) * tank_speed
        self.y += - math.sin(self.angle) * tank_speed
        been_stupid_backward_moving_test = False
        for wall in walls:
            if (wall[0] <= self.x) and (wall[0] + 20 >= self.x) and (wall[1] <= self.y) and (wall[1] + 20 >= self.y):
                self.x += math.cos(self.angle) * tank_speed
                self.y += math.sin(self.angle) * tank_speed
                been_stupid_backward_moving_test = True
        been_stupid_backward_moving[i][j].append(been_stupid_backward_moving_test)

    def AI_idea(self, aksons_for_one_tank, obj):
        neurons_1_line = [self.x, self.y, self.angle, obj.x, obj.y, obj.angle, obj.shooting]
        neurons_2_line = []
        neurons_3_line = []
        answer = [[], []]
        for i in range(5):
            part_of_answer = 0
            for j in range(7):
                part_of_answer += aksons_for_one_tank[0][i][j] * neurons_1_line[j]
            part_of_answer = math.cos(part_of_answer)
            neurons_2_line.append(part_of_answer)

        for i in range(5):
            part_of_answer = 0
            for j in range(5):
                part_of_answer += aksons_for_one_tank[1][i][j] * neurons_2_line[j]
            part_of_answer = math.cos(part_of_answer)
            neurons_3_line.append(part_of_answer)

        for i in range(5):
            part_of_answer = 0
            for j in range(5):
                part_of_answer += aksons_for_one_tank[2][i][j] * neurons_3_line[j]
            if math.cos(part_of_answer**2) <= 0:
                part_of_answer = False
            else:
                part_of_answer = True
            answer[0].append(part_of_answer)

        neurons_1_line = [WIDTH - self.x, HEIGHT - self.y, - self.angle, WIDTH - obj.x, HEIGHT - obj.y, - obj.angle, obj.shooting]
        neurons_2_line = []
        neurons_3_line = []
        for i in range(5):
            part_of_answer = 0
            for j in range(7):
                part_of_answer += aksons_for_one_tank[0][i][j] * neurons_1_line[j]
            part_of_answer = math.cos(part_of_answer)
            neurons_2_line.append(part_of_answer)

        for i in range(5):
            part_of_answer = 0
            for j in range(5):
                part_of_answer += aksons_for_one_tank[1][i][j] * neurons_2_line[j]
            part_of_answer = math.cos(part_of_answer)
            neurons_3_line.append(part_of_answer)

        for i in range(5):
            part_of_answer = 0
            for j in range(5):
                part_of_answer += aksons_for_one_tank[2][i][j] * neurons_3_line[j]
            if math.cos(part_of_answer) <= 0:
                part_of_answer = False
            else:
                part_of_answer = True
            answer[1].append(part_of_answer)
        return answer

class Bullet():
    def __init__(self, screen: pygame.Surface, x, y, alpha):
        self.x = x
        self.y = y
        self.alpha = alpha
        self.vx = math.cos(self.alpha) * bullet_speed
        self.vy = math.sin(self.alpha) * bullet_speed

    def hittest(self):
        Test = False
        for wall in walls:
            if self.x <= wall[0] + 20 and self.x >= wall[0] and self.y <= wall[1] + 20 and self.y >= wall[1]:
                Test = True
        return Test

    def move(self):
        self.x += self.vx
        self.y += self.vy

    def draw(self):
        pygame.draw.circle(screen, RED, (self.x, self.y), bullet_radius)

#Одна эта команда совершает все действия
def draw_and_act_one_frame(aksons):
    # движение ботов танков
    for i in range(AI_tanks_numbers):
        for j in range(2):
            for bullet in bullets[i]:
                if AI_tanks[i][j].hittest(bullet, i, j):
                        AI_tanks[i].remove(AI_tanks[i][j])
                        removed_tanks.append([i, j])
            tank_appear = True
            for h in range(len(removed_tanks)):
                if (removed_tanks[h][0] == i) and (removed_tanks[h][1] == j):
                    tank_appear = False
            if tank_appear:
                AI_tanks[i][j].draw(i, j)
                if AI_tanks[i][j].AI_idea(aksons[(i + j)%AI_tanks_numbers], AI_tanks[i][(j+1)%2])[j][0]:
                    AI_tanks[i][j].move_forward(i, j)
                if AI_tanks[i][j].AI_idea(aksons[(i + j)%AI_tanks_numbers], AI_tanks[i][(j+1)%2])[j][1]:
                    AI_tanks[i][j].move_backward(i, j)
                if AI_tanks[i][j].AI_idea(aksons[(i + j)%AI_tanks_numbers], AI_tanks[i][(j+1)%2])[j][2]:
                    AI_tanks[i][j].rotate_left()
                if AI_tanks[i][j].AI_idea(aksons[(i + j)%AI_tanks_numbers], AI_tanks[i][(j+1)%2])[j][3]:
                    AI_tanks[i][j].rotate_right()
                if AI_tanks[i][j].AI_idea(aksons[(i + j)%AI_tanks_numbers], AI_tanks[i][(j+1)%2])[j][4]:
                    AI_tanks[i][j].shot(i, j, time)

    #движение пуль
    for i in range(AI_tanks_numbers):
        for bullet in bullets[i]:
            if bullet.hittest():
                bullets[i].remove(bullet)
            bullet.move()
            bullet.draw()
    #стенки
    for wall in walls:
        pygame.draw.rect(screen, YELLOW, (wall[0], wall[1], 20, 20), 10)

    pygame.display.update()

#начальные условия
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.update()
clock = pygame.time.Clock()
finished = False
time = 0
generation = 1
best_aksons_score = []
best_aksons = []
#массив ботов танков
AI_tanks = []
for i in range(AI_tanks_numbers):
    AI_tanks.append([])
for i in range(AI_tanks_numbers):
    AI_tanks[i].append(AI_Tank(screen, WIDTH - 40, HEIGHT - 40, math.pi))
    AI_tanks[i].append(AI_Tank(screen, 40, 40, 0))
removed_tanks = []

while not finished:
    screen.fill(BLACK)
    clock.tick(FPS * time_speed)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True
    if ((time  // FPS) <= round_time):
        draw_and_act_one_frame(aksons)
        print((time) // FPS)
        print(generation)
    else:
        walking_in_cicle = []
        for i in range(AI_tanks_numbers):
            walking_in_cicle.append([[], []])
        for i in range(AI_tanks_numbers):
            for j in range(2):
                for k in range(len(x[i][j])):
                    unique_x_k = True
                    for p in range(k):
                        if (x[i][j][p] == x[i][j][k]) and (y[i][j][p] == y[i][j][k]):
                            unique_x_k = False
                    if unique_x_k:
                        walking_in_cicle[i][j].append([k])
                        for p in range(len(x[i][j]) - k - 1):
                            if (x[i][j][k] == x[i][j][k + p + 1]) and (y[i][j][k] == y[i][j][k + p + 1]):
                                walking_in_cicle[i][j][len(walking_in_cicle[i][j]) - 1].append(k + p + 1)

        IQ = []
        for i in range(AI_tanks_numbers):
            IQ.append([0, 0])
        for i in range(AI_tanks_numbers):
            for j in range(2):
                for k in range(len(walking_in_cicle[i][j])):
                    for p in range(len(walking_in_cicle[i][j][k]) - 1):
                        IQ[i][j] += (1 / (walking_in_cicle[i][j][k][p] - walking_in_cicle[i][j][k][p + 1]))

                cicles_maximum_part_of_IQ = - IQ[i][j]

                if been_shooted[i][j]:
                    IQ[i][j] += - cicles_maximum_part_of_IQ - 2

                if been_shooted[i][(j + 1) % 2]:
                    IQ[i][j] += cicles_maximum_part_of_IQ + 2

                for k in range(len(been_stupid_forward_moving[i][j])):
                    if been_stupid_forward_moving[i][j]:
                        IQ[i][j] += - 1 / 10

                for k in range(len(been_stupid_backward_moving[i][j])):
                    if been_stupid_backward_moving[i][j]:
                        IQ[i][j] += - 1 / 10
        IQ_test = []
        for i in range(AI_tanks_numbers):
            IQ_test.append(IQ[i][0] + IQ[(i - 1) % AI_tanks_numbers][1])

        IQ_indexes_scale = []
        for i in range(AI_tanks_numbers):
            for j in range(AI_tanks_numbers):
                if (sorted(IQ_test)[AI_tanks_numbers - 1 - i] == IQ_test[j]) and (len(IQ_indexes_scale) < AI_tanks_numbers):
                    if len(IQ_indexes_scale) == 0:
                        IQ_indexes_scale.append(j)
                    else:
                        strong_indexes_append = True
                        for k in range(len(IQ_indexes_scale)):
                            if IQ_indexes_scale[k] == j:
                                strong_indexes_append = False
                        if strong_indexes_append:
                            IQ_indexes_scale.append(j)
        best_aksons.append(aksons[IQ_indexes_scale[0]])
        best_aksons_score.append(IQ_test[IQ_indexes_scale[0]])
        out_file = open('AI_Tanks.txt', 'a')
        out_file.write(str(aksons[IQ_indexes_scale[0]]) + '\n')
        out_file.write(str(generation) + '\n')
        out_file.close()
        for i in range(AI_tanks_numbers):
            for j in range(3):
                if j == 0:
                    for k in range(5):
                        for n in range(7):
                            aksons[IQ_indexes_scale[i]][0][k][n] += rnd.randint(-100, 100) / evolution[i]
                else:
                    for k in range(5):
                        for n in range(5):
                            aksons[IQ_indexes_scale[i]][j][k][n] += rnd.randint(-100, 100) / evolution[i]
        #раз в 10 поколений алгоритм лучшего ИИ за все эти 10 поколений отдается всем
        if generation % 10 == 0:
            best_akson_out_of_10_generations = -1
            best_aksons_score_massive = best_aksons_score
            for i in range(10):
                if (sorted(best_aksons_score_massive)[9] == best_aksons_score[i]) and (best_akson_out_of_10_generations == -1):
                    best_akson_out_of_10_generations = i
            for i in range(10):
                aksons[i] = best_aksons[best_akson_out_of_10_generations]

        x = []
        for i in range(AI_tanks_numbers):
            x.append([[], []])
        y = []
        for i in range(AI_tanks_numbers):
            y.append([[], []])
        shooting = []
        for i in range(AI_tanks_numbers):
            shooting.append([[0], [0]])

        been_shooted = []
        for i in range(AI_tanks_numbers):
            been_shooted.append([[], []])
        been_stupid_forward_moving = []
        for i in range(AI_tanks_numbers):
            been_stupid_forward_moving.append([[], []])
        been_stupid_backward_moving = []
        for i in range(AI_tanks_numbers):
            been_stupid_backward_moving.append([[], []])
        AI_tanks = []
        for i in range(AI_tanks_numbers):
            AI_tanks.append([])
        for i in range(AI_tanks_numbers):
            AI_tanks[i].append(AI_Tank(screen, WIDTH - 40, HEIGHT - 40, math.pi))
            AI_tanks[i].append(AI_Tank(screen, 40, 40, 0))
        removed_tanks = []

        time = 0

        generation += 1

    time += 1


pygame.quit()
print(best_aksons[best_akson_out_of_10_generations])
