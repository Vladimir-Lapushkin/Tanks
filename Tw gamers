import math
from random import choice
import random as rnd
import pygame
#Teacher
Teacher_idea = [[],[],[],[],[]]
#from blocks import blocks

FPS = 30
#цвета
RED = 0xFF0000
BLUE = 0x0000FF
YELLOW = 0xFFC91F
GREEN = 0x00FF00
MAGENTA = 0xFF03B8
CYAN = 0x00FFCC
BLACK = (0, 0, 0)
WHITE = 0xFFFFFF
GREY = 0x7D7D7D
GAME_COLORS = [RED, BLUE, YELLOW, GREEN, MAGENTA, CYAN]
#размеры экрана
WIDTH = 800
HEIGHT = 600
#параметры игры
bullet_speed = 10
bullet_radius = 2
tank_speed = 3
#массив пуль
bullets = []
#ландшафт(стены)
walls = [[0, 0], [780, 0], [0, 580], [780, 580], [0, 0], [780, 0], [0, 580], [780, 580], [0, 0], [780, 0], [0, 580], [780, 580], [0, 20], [780, 20], [0, 560], [780, 560], [0, 40], [780, 40], [0, 540], [780, 540], [0, 60], [780, 60], [0, 520], [780, 520], [0, 60], [780, 60], [0, 520], [780, 520], [0, 60], [780, 60], [0, 520], [780, 520], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 80], [780, 80], [0, 500], [780, 500], [0, 100], [780, 100], [0, 480], [780, 480], [0, 100], [780, 100], [0, 480], [780, 480], [0, 120], [780, 120], [0, 460], [780, 460], [0, 120], [780, 120], [0, 460], [780, 460], [0, 140], [780, 140], [0, 440], [780, 440], [0, 140], [780, 140], [0, 440], [780, 440], [0, 140], [780, 140], [0, 440], [780, 440], [0, 160], [780, 160], [0, 420], [780, 420], [0, 160], [780, 160], [0, 420], [780, 420], [0, 180], [780, 180], [0, 400], [780, 400], [0, 180], [780, 180], [0, 400], [780, 400], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 200], [780, 200], [0, 380], [780, 380], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 220], [780, 220], [0, 360], [780, 360], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 240], [780, 240], [0, 340], [780, 340], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 260], [780, 260], [0, 320], [780, 320], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [0, 280], [780, 280], [0, 300], [780, 300], [20, 0], [760, 0], [20, 580], [760, 580], [20, 0], [760, 0], [20, 580], [760, 580], [20, 0], [760, 0], [20, 580], [760, 580], [40, 0], [740, 0], [40, 580], [740, 580], [60, 0], [720, 0], [60, 580], [720, 580], [60, 0], [720, 0], [60, 580], [720, 580], [80, 0], [700, 0], [80, 580], [700, 580], [80, 0], [700, 0], [80, 580], [700, 580], [80, 0], [700, 0], [80, 580], [700, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [100, 0], [680, 0], [100, 580], [680, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [120, 0], [660, 0], [120, 580], [660, 580], [140, 0], [640, 0], [140, 580], [640, 580], [140, 0], [640, 0], [140, 580], [640, 580], [140, 0], [640, 0], [140, 580], [640, 580], [160, 0], [620, 0], [160, 580], [620, 580], [160, 0], [620, 0], [160, 580], [620, 580], [160, 0], [620, 0], [160, 580], [620, 580], [160, 0], [620, 0], [160, 580], [620, 580], [180, 0], [600, 0], [180, 580], [600, 580], [180, 0], [600, 0], [180, 580], [600, 580], [180, 0], [600, 0], [180, 580], [600, 580], [180, 0], [600, 0], [180, 580], [600, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [200, 0], [580, 0], [200, 580], [580, 580], [220, 0], [560, 0], [220, 580], [560, 580], [220, 0], [560, 0], [220, 580], [560, 580], [220, 0], [560, 0], [220, 580], [560, 580], [220, 0], [560, 0], [220, 580], [560, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [240, 0], [540, 0], [240, 580], [540, 580], [260, 0], [520, 0], [260, 580], [520, 580], [260, 0], [520, 0], [260, 580], [520, 580], [260, 0], [520, 0], [260, 580], [520, 580], [260, 0], [520, 0], [260, 580], [520, 580], [280, 0], [500, 0], [280, 580], [500, 580], [280, 0], [500, 0], [280, 580], [500, 580], [280, 0], [500, 0], [280, 580], [500, 580], [280, 0], [500, 0], [280, 580], [500, 580], [300, 0], [480, 0], [300, 580], [480, 580], [300, 0], [480, 0], [300, 580], [480, 580], [300, 0], [480, 0], [300, 580], [480, 580], [320, 0], [460, 0], [320, 580], [460, 580], [320, 0], [460, 0], [320, 580], [460, 580], [320, 0], [460, 0], [320, 580], [460, 580], [320, 0], [460, 0], [320, 580], [460, 580], [340, 0], [440, 0], [340, 580], [440, 580], [340, 0], [440, 0], [340, 580], [440, 580], [340, 0], [440, 0], [340, 580], [440, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [360, 0], [420, 0], [360, 580], [420, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [380, 0], [400, 0], [380, 580], [400, 580], [140, 40], [640, 40], [140, 540], [640, 540], [140, 40], [640, 40], [140, 540], [640, 540], [140, 40], [640, 40], [140, 540], [640, 540], [140, 80], [640, 80], [140, 500], [640, 500], [140, 80], [640, 80], [140, 500], [640, 500], [140, 100], [640, 100], [140, 480], [640, 480], [140, 100], [640, 100], [140, 480], [640, 480], [140, 120], [640, 120], [140, 460], [640, 460], [140, 120], [640, 120], [140, 460], [640, 460], [140, 120], [640, 120], [140, 460], [640, 460], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 140], [640, 140], [140, 440], [640, 440], [140, 60], [640, 60], [140, 520], [640, 520], [60, 180], [720, 180], [60, 400], [720, 400], [60, 180], [720, 180], [60, 400], [720, 400], [60, 180], [720, 180], [60, 400], [720, 400], [60, 180], [720, 180], [60, 400], [720, 400], [80, 180], [700, 180], [80, 400], [700, 400], [80, 180], [700, 180], [80, 400], [700, 400], [100, 180], [680, 180], [100, 400], [680, 400], [100, 180], [680, 180], [100, 400], [680, 400], [120, 180], [660, 180], [120, 400], [660, 400], [120, 180], [660, 180], [120, 400], [660, 400], [120, 180], [660, 180], [120, 400], [660, 400], [120, 180], [660, 180], [120, 400], [660, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [140, 180], [640, 180], [140, 400], [640, 400], [160, 180], [620, 180], [160, 400], [620, 400], [160, 180], [620, 180], [160, 400], [620, 400], [160, 180], [620, 180], [160, 400], [620, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [180, 180], [600, 180], [180, 400], [600, 400], [200, 160], [580, 160], [200, 420], [580, 420], [200, 180], [580, 180], [200, 400], [580, 400], [220, 160], [560, 160], [220, 420], [560, 420], [160, 260], [620, 260], [160, 320], [620, 320], [160, 260], [620, 260], [160, 320], [620, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [180, 260], [600, 260], [180, 320], [600, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [200, 260], [580, 260], [200, 320], [580, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [220, 260], [560, 260], [220, 320], [560, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [240, 260], [540, 260], [240, 320], [540, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [260, 260], [520, 260], [260, 320], [520, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 260], [500, 260], [280, 320], [500, 320], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 240], [500, 240], [280, 340], [500, 340], [280, 220], [500, 220], [280, 360], [500, 360], [280, 220], [500, 220], [280, 360], [500, 360], [280, 220], [500, 220], [280, 360], [500, 360], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 200], [500, 200], [280, 380], [500, 380], [280, 180], [500, 180], [280, 400], [500, 400], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 160], [500, 160], [280, 420], [500, 420], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 140], [500, 140], [280, 440], [500, 440], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 120], [500, 120], [280, 460], [500, 460], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [280, 100], [500, 100], [280, 480], [500, 480], [260, 40], [520, 40], [260, 540], [520, 540], [260, 40], [520, 40], [260, 540], [520, 540], [260, 40], [520, 40], [260, 540], [520, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [280, 40], [500, 40], [280, 540], [500, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [300, 40], [480, 40], [300, 540], [480, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [320, 40], [460, 40], [320, 540], [460, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 40], [440, 40], [340, 540], [440, 540], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [340, 20], [440, 20], [340, 560], [440, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 20], [420, 20], [360, 560], [420, 560], [360, 40], [420, 40], [360, 540], [420, 540], [360, 40], [420, 40], [360, 540], [420, 540], [360, 40], [420, 40], [360, 540], [420, 540], [360, 40], [420, 40], [360, 540], [420, 540], [360, 80], [420, 80], [360, 500], [420, 500], [360, 80], [420, 80], [360, 500], [420, 500], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 100], [420, 100], [360, 480], [420, 480], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 120], [420, 120], [360, 460], [420, 460], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 140], [420, 140], [360, 440], [420, 440], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 160], [420, 160], [360, 420], [420, 420], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 180], [420, 180], [360, 400], [420, 400], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 200], [420, 200], [360, 380], [420, 380], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 220], [420, 220], [360, 360], [420, 360], [360, 280], [420, 280], [360, 300], [420, 300], [80, 440], [700, 440], [80, 140], [700, 140], [220, 500], [560, 500], [220, 80], [560, 80], [100, 220], [680, 220], [100, 360], [680, 360]]
shooting_1 = [0]
shooting_2 = [0]
#лучшие аксоны из программы genetic_algorithm
aksons = [[[-9028.903135820134, 285751.06439297326, -152579.20664643362, -187839.11602861408, 192200.6324899371, 146351.06431773872, -584859.0325576041], [223660.8297080379, 212990.64868161193, 108231.1089612568, 230071.16151997418, -621698.9090125238, -197628.97184849373, 38521.12976628475], [40471.32352665366, -443379.0089286661, 406970.9873156077, 276391.1588746765, 4271.239513324285, -361738.96695558616, -93168.6973947599], [-399899.03633047757, 29780.997096380357, -416779.0448881471, 47480.95889531403, 48390.88659881162, -420148.8568240636, 170190.8478732368], [415930.7865500414, -6748.882419788227, 356700.8328000492, -127229.0493021015, -73498.97003787856, -96659.0051764646, -44468.896831580256]], [[-262108.99895796416, -154058.94213179458, 15831.128081399831, 528771.0784239637, -304428.909884544], [-246348.74445622487, -20339.083285655703, 145050.97876903496, 250570.6866627164, -326738.93267447094], [-132728.85987229625, 30040.98363665741, 67051.02913965454, -358518.8776102156, -63188.91192530958], [68721.12464338334, 14560.827720766172, -258809.03567314066, 319690.9616578945, 110061.00827329495], [100130.91586407578, 269620.8714359526, 340180.8516659736, 80420.9599377563, 295980.96803373675]], [[8881.028930863478, 273020.9259448234, 530461.0392999343, 145121.0150616415, -298848.7225206673], [99330.83071677883, -107249.1615850056, 143240.97196920408, 667590.7544999239, 80850.88485648819], [259410.9728176509, 179690.97224760064, -453698.92223874194, -95989.01991370152, 22070.990603634793], [187161.0069703524, 187241.08653817486, -276769.00474025845, 57271.124362250914, 62021.06653645176], [-70499.12473521661, -142879.21946570335, -128628.92109804615, -169748.98944342867, 309461.13591607555]]]

class Bullet():
    def __init__(self, screen: pygame.Surface, x, y, alpha):
        self.x = x
        self.y = y
        self.alpha = alpha
        self.vx = math.cos(self.alpha) * bullet_speed
        self.vy = math.sin(self.alpha) * bullet_speed

    def hittest(self):
        Test = False
        for wall in walls:
            if self.x <= wall[0] + 20 and self.x >= wall[0] and self.y <= wall[1] + 20 and self.y >= wall[1]:
                Test = True
        return Test

    def move(self):
        self.x += self.vx
        self.y += self.vy

    def draw(self):
        pygame.draw.circle(screen, RED, (self.x, self.y), bullet_radius)

class Tank():
    def __init__(self, screen: pygame.Surface, x, y, alpha):
        self.x = x
        self.y = y
        self.angle = alpha
        self.vx = 0
        self.vy = 0
        self.shooting = 0

    def draw(self):
        pygame.draw.polygon(screen, CYAN, [(self.x + math.cos(self.angle) * 10, self.y + math.sin(self.angle) * 10),
                                           (self.x - math.sin(self.angle) * 5, self.y + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10, self.y - math.sin(self.angle) * 10),
                                           (self.x + math.sin(self.angle) * 5, self.y - math.cos(self.angle) * 5)])
        pygame.draw.polygon(screen, CYAN, [(self.x + math.cos(self.angle) * 10 - math.sin(self.angle) * 5,
                                            self.y + math.sin(self.angle) * 10 + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10 - math.sin(self.angle) * 5,
                                            self.y - math.sin(self.angle) * 10 + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10 - math.sin(self.angle) * 8,
                                            self.y - math.sin(self.angle) * 10 + math.cos(self.angle) * 8),
                                           (self.x + math.cos(self.angle) * 10 - math.sin(self.angle) * 8,
                                            self.y + math.sin(self.angle) * 10 + math.cos(self.angle) * 8)])
        pygame.draw.polygon(screen, CYAN, [(self.x - math.cos(self.angle) * 10 + math.sin(self.angle) * 5,
                                            self.y - math.sin(self.angle) * 10 - math.cos(self.angle) * 5),
                                           (self.x + math.cos(self.angle) * 10 + math.sin(self.angle) * 5,
                                            self.y + math.sin(self.angle) * 10 - math.cos(self.angle) * 5),
                                           (self.x + math.cos(self.angle) * 10 + math.sin(self.angle) * 8,
                                            self.y + math.sin(self.angle) * 10 - math.cos(self.angle) * 8),
                                           (self.x - math.cos(self.angle) * 10 + math.sin(self.angle) * 8,
                                            self.y - math.sin(self.angle) * 10 - math.cos(self.angle) * 8)])
        pygame.draw.polygon(screen, CYAN, [(self.x + math.sin(self.angle) * 2, self.y - math.cos(self.angle) * 2),
                                           (self.x - math.sin(self.angle) * 2, self.y + math.cos(self.angle) * 2),
                                           (self.x - math.sin(self.angle) * 2 + math.cos(self.angle) * 15, self.y + math.cos(self.angle) * 2 + math.sin(self.angle) * 15),
                                           (self.x + math.sin(self.angle) * 2 + math.cos(self.angle) * 15, self.y - math.cos(self.angle) * 2 + math.sin(self.angle) * 15)])

    def hittest(self,obj):
        if (obj.x - self.x) == 0:
            if (obj.y - self.y) >= 0:
                betta = math.pi/2
            else:
                betta = - math.pi / 2
        else:
            betta = math.atan((obj.y - self.y)/(obj.x - self.x))
        if (math.fabs(math.sin(betta - self.angle) * (((obj.y - self.y)**2 + (obj.x - self.x)**2)**(1/2))) <= 8) and (math.fabs(math.cos(betta - self.angle) * (((obj.y - self.y)**2 + (obj.x - self.x)**2)**(1/2))) <= 10):
            return True
        else:
            return False

    def shot(self, time):
        if max(shooting_1) + 2 * FPS <= time:
            bullets.append(Bullet(screen, self.x + 15 * math.cos(self.angle), self.y + 15 * math.sin(self.angle), self.angle))
            shooting_1.append(time)
            self.shooting = 1

    def dontshot(self):
        self.shooting = 0

    def rotate_left(self):
        self.angle += -0.1

    def rotate_right(self):
        self.angle += 0.1

    def move_forward(self):
        self.x += math.cos(self.angle) * tank_speed
        self.y += math.sin(self.angle) * tank_speed
        for wall in walls:
            if (wall[0] <= self.x) and (wall[0] + 20 >= self.x) and (wall[1] <= self.y) and (wall[1] + 20 >= self.y):
                self.x += - math.cos(self.angle) * tank_speed
                self.y += - math.sin(self.angle) * tank_speed

    def move_backward(self):
        self.x += - math.cos(self.angle) * tank_speed
        self.y += - math.sin(self.angle) * tank_speed
        for wall in walls:
            if (wall[0] <= self.x) and (wall[0] + 20 >= self.x) and (wall[1] <= self.y) and (wall[1] + 20 >= self.y):
                self.x += math.cos(self.angle) * tank_speed
                self.y +=  math.sin(self.angle) * tank_speed

class AI_Tank():
    def __init__(self, screen: pygame.Surface, x, y, alpha):
        self.x = x
        self.y = y
        self.angle = alpha
        self.vx = 0
        self.vy = 0
        self.shooting = 0

    def draw(self):
        pygame.draw.polygon(screen, CYAN, [(self.x + math.cos(self.angle) * 10, self.y + math.sin(self.angle) * 10),
                                           (self.x - math.sin(self.angle) * 5, self.y + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10, self.y - math.sin(self.angle) * 10),
                                           (self.x + math.sin(self.angle) * 5, self.y - math.cos(self.angle) * 5)])
        pygame.draw.polygon(screen, CYAN, [(self.x + math.cos(self.angle) * 10 - math.sin(self.angle) * 5,
                                            self.y + math.sin(self.angle) * 10 + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10 - math.sin(self.angle) * 5,
                                            self.y - math.sin(self.angle) * 10 + math.cos(self.angle) * 5),
                                           (self.x - math.cos(self.angle) * 10 - math.sin(self.angle) * 8,
                                            self.y - math.sin(self.angle) * 10 + math.cos(self.angle) * 8),
                                           (self.x + math.cos(self.angle) * 10 - math.sin(self.angle) * 8,
                                            self.y + math.sin(self.angle) * 10 + math.cos(self.angle) * 8)])
        pygame.draw.polygon(screen, CYAN, [(self.x - math.cos(self.angle) * 10 + math.sin(self.angle) * 5,
                                            self.y - math.sin(self.angle) * 10 - math.cos(self.angle) * 5),
                                           (self.x + math.cos(self.angle) * 10 + math.sin(self.angle) * 5,
                                            self.y + math.sin(self.angle) * 10 - math.cos(self.angle) * 5),
                                           (self.x + math.cos(self.angle) * 10 + math.sin(self.angle) * 8,
                                            self.y + math.sin(self.angle) * 10 - math.cos(self.angle) * 8),
                                           (self.x - math.cos(self.angle) * 10 + math.sin(self.angle) * 8,
                                            self.y - math.sin(self.angle) * 10 - math.cos(self.angle) * 8)])
        pygame.draw.polygon(screen, CYAN, [(self.x + math.sin(self.angle) * 2, self.y - math.cos(self.angle) * 2),
                                           (self.x - math.sin(self.angle) * 2, self.y + math.cos(self.angle) * 2),
                                           (self.x - math.sin(self.angle) * 2 + math.cos(self.angle) * 15, self.y + math.cos(self.angle) * 2 + math.sin(self.angle) * 15),
                                           (self.x + math.sin(self.angle) * 2 + math.cos(self.angle) * 15, self.y - math.cos(self.angle) * 2 + math.sin(self.angle) * 15)])

    def hittest(self, obj):
        if (obj.x - self.x) == 0:
            if (obj.y - self.y) >= 0:
                betta = math.pi/2
            else:
                betta = - math.pi / 2
        else:
            betta = math.atan((obj.y - self.y)/(obj.x - self.x))
        if (math.fabs(math.sin(betta - self.angle) * (((obj.y - self.y)**2 + (obj.x - self.x)**2)**(1/2))) <= 8) and (math.fabs(math.cos(betta - self.angle) * (((obj.y - self.y)**2 + (obj.x - self.x)**2)**(1/2))) <= 10):
            return True
        else:
            return False

    def shot(self, time):
        if max(shooting_2) + 2 * FPS <= time:
            bullets.append(Bullet(screen, self.x + 15 * math.cos(self.angle), self.y + 15 * math.sin(self.angle), self.angle))
            shooting_2.append(time)
            self.shooting = 1
        self.shooting = 0

    def rotate_left(self):
        self.angle += -0.1

    def rotate_right(self):
        self.angle += 0.1

    def move_forward(self):
        self.x += math.cos(self.angle) * tank_speed
        self.y += math.sin(self.angle) * tank_speed
        for wall in walls:
            if (wall[0] <= self.x) and (wall[0] + 20 >= self.x) and (wall[1] <= self.y) and (wall[1] + 20 >= self.y):
                self.x += - math.cos(self.angle) * tank_speed
                self.y += - math.sin(self.angle) * tank_speed

    def move_backward(self):
        self.x += - math.cos(self.angle) * tank_speed
        self.y += - math.sin(self.angle) * tank_speed
        for wall in walls:
            if (wall[0] <= self.x) and (wall[0] + 20 >= self.x) and (wall[1] <= self.y) and (wall[1] + 20 >= self.y):
                self.x += math.cos(self.angle) * tank_speed
                self.y += math.sin(self.angle) * tank_speed

    def AI_idea(self, aksons_for_one_tank, obj):
        neurons_1_line = [self.x, self.y, self.angle, obj.x, obj.y, obj.angle, obj.shooting]
        neurons_2_line = []
        neurons_3_line = []
        answer = []
        for i in range(5):
            part_of_answer = 0
            for j in range(7):
                part_of_answer += aksons_for_one_tank[0][i][j] * neurons_1_line[j]
            part_of_answer = math.cos(part_of_answer)
            neurons_2_line.append(part_of_answer)

        for i in range(5):
            part_of_answer = 0
            for j in range(5):
                part_of_answer += aksons_for_one_tank[1][i][j] * neurons_2_line[j]
            part_of_answer = math.cos(part_of_answer)
            neurons_3_line.append(part_of_answer)

        for i in range(5):
            part_of_answer = 0
            for j in range(5):
                part_of_answer += aksons_for_one_tank[2][i][j] * neurons_3_line[j]
            if math.cos(part_of_answer) <= 0:
                part_of_answer = False
            else:
                part_of_answer = True
            answer.append(part_of_answer)
        return answer

#начальные условия
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.update()
clock = pygame.time.Clock()
finished = False
#начальные условия вспомогательных параметров
key_w_pressed = False
key_s_pressed = False
key_a_pressed = False
key_d_pressed = False
shot_1 = False
shot_2 = False
key_UP_pressed = False
key_DOWN_pressed = False
key_LEFT_pressed = False
key_RIGHT_pressed = False
time = 0
#массив танков
tanks_1 = []
tanks_1.append(Tank(screen, 40, 40, 0))

tanks_2 = []
tanks_2.append(Tank(screen, WIDTH - 40, HEIGHT - 40, math.pi))
#массив танков ии
AI_tanks = []
AI_tanks.append(AI_Tank(screen, WIDTH - 40, HEIGHT - 40, math.pi))

while not finished:
    screen.fill(BLACK)
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_w:
            key_w_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_w:
            key_w_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_s:
            key_s_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_s:
            key_s_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_a:
            key_a_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_a:
            key_a_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_d:
            key_d_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_d:
            key_d_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_x:
            shot_1 = True
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            key_UP_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            key_UP_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            key_DOWN_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            key_DOWN_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            key_LEFT_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            key_LEFT_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            key_RIGHT_pressed = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            key_RIGHT_pressed = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_m:
            shot_2 = True
#движение танка игрока. for и здесь и в ии написан для удобного удаления танков и возможности модификации игры
    for tank in tanks_1:
        for bullet in bullets:
            if tank.hittest(bullet):
                tanks_1.remove(tank)
        if key_s_pressed:
            tank.move_backward()
        if key_w_pressed:
            tank.move_forward()
        if key_a_pressed:
            tank.rotate_left()
        if key_d_pressed:
            tank.rotate_right()
        if shot_1:
            tank.shot(time)
            shot_1 = False
        else:
            tank.dontshot()
        tank.draw()
# движение танка второго игрока. for и здесь и в ии написан для удобного удаления танков и возможности модификации игры
    for tank in tanks_2:
        for bullet in bullets:
            if tank.hittest(bullet):
                tanks_2.remove(tank)
        if key_DOWN_pressed:
            tank.move_backward()
        if key_UP_pressed:
            tank.move_forward()
        if key_LEFT_pressed:
            tank.rotate_left()
        if key_RIGHT_pressed:
            tank.rotate_right()
        if shot_2:
            tank.shot(time)
            shot_2 = False
        else:
            tank.dontshot()
        tank.draw()
#движение пуль
    for bullet in bullets:
        if bullet.hittest():
            bullets.remove(bullet)
        bullet.move()
        bullet.draw()
#стенки
    for wall in walls:
        pygame.draw.rect(screen, YELLOW, (wall[0], wall[1], 20, 20), 10)
    pygame.display.update()

    time += 1

pygame.quit()
